generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  fulfilled
  shipped
  awaiting_shipment
}

enum ShirtModel {
  t_shirt
  polo_shirt
}

enum ShirtColor {
  black
  white
  red
  blue
  green
  yellow
}

enum ShirtSide {
  front
  back
  left
  right
}

model Configuration {
  id                 String               @id @default(cuid())
  ConfigurationImage ConfigurationImage[]
  color              ShirtColor
  model              ShirtModel
  croppedImages      CroppedImage[] // Liên kết tới các hình ảnh cắt của từng mặt
  Order              Order[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model CroppedImage {
  id              String        @id @default(cuid())
  configuration   Configuration @relation(fields: [configurationId], references: [id])
  configurationId String
  side            ShirtSide // Xác định mặt áo: trước, sau, trái, phải
  url             String // URL của hình ảnh đã cắt cho mặt áo này
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model ImageUrl {
  id                 String               @id @default(cuid())
  width              Int
  height             Int
  url                String
  x                  Float
  y                  Float
  ConfigurationImage ConfigurationImage[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model ConfigurationImage {
  id              String        @id @default(cuid())
  imageUrl        ImageUrl      @relation(fields: [imageUrlId], references: [id])
  imageUrlId      String
  Configuration   Configuration @relation(fields: [configurationId], references: [id])
  configurationId String
  side            ShirtSide // Xác định mặt áo: trước, sau, trái, phải
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model User {
  id        String   @id @default(cuid())
  email     String
  Order     Order[]
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id              String        @id @default(cuid())
  configurationId String
  configuration   Configuration @relation(fields: [configurationId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  amount          Float
  isPaid          Boolean       @default(false)
  status          OrderStatus   @default(awaiting_shipment)

  shippingAddress   ShippingAddress? @relation
  shippingAddressId String?          @unique

  createdAt DateTime @default(now())
  updated   DateTime @updatedAt
}

model ShippingAddress {
  id          String  @id @default(cuid())
  name        String
  address     String
  email       String
  phoneNumber String?
  order       Order   @relation(fields: [orderId], references: [id])
  orderId     String  @unique
}
